(define operation-list 
  (list (cons (lambda (exp) (variable? exp))
			  (lambda (exp env) (lookup-variable-value exp env)))
		(cons (lambda (exp) (quoted? exp))
			  (lambda (exp env) (text-of-quotation exp)))
		(cons (lambda (exp) (assignment? exp))
			  (lambda (exp env) (eval-assignment exp env)))
		(cons (lambda (exp) (definition? exp))
			  (lambda (exp env) (eval-definition exp env)))
		(cons (lambda (exp) (if? exp))
			  (lambda (exp env) (eval-if exp env)))
		(cons (lambda (exp) (lambda? exp))
			  (lambda (exp env)
				(make-procedure (lambda-parameters exp)
								(lambda-body exp)
								env)))
		(cons (lambda (exp) (begin? exp))
			  (lambda (exp env)
				(eval-sequence (begin-actions exp) env)))
		(cons (lambda (exp) (cond? exp))
			  (lambda (exp env) (eval (cond->if exp) env)))))

(define (eval-operation exp env oplist)
  (if (null? oplist)
	  false
	  (if ((car (car oplist)) exp)
		  ((cdr (car oplist)) exp env)
		  (eval-operation exp env (cdr oplist))
		  ))
  )

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
		((eval-operation exp env operation-list))
		((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
		(else
		 (error "Unknown expression type -- EVAL" exp))))
